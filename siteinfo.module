<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_menu().
 */
function siteinfo_menu() {
  $items['page_json/%/%'] = array(
    'access callback' => TRUE,
    'page callback' => 'siteinfo_json_callback',
    'page arguments' => array(1, 2)
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function siteinfo_form_system_site_information_settings_alter(&$form, &$form_state, $form_id) {

  // Add new text field for Site API Key.
  $form['site_information']['siteapikey'] = array(
    '#title' => t('Site API Key'),
    '#description' => t('Site api key.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('siteapikey') ? check_plain(variable_get('siteapikey')) : '',
    '#attributes' => array(
      'placeholder' => t('No API Key yet'),
     ),
  );

  // Change Save configuration button text.
  $form['actions']['submit']['#value'] = t('Update Configuration');

  // Add custom submit handler.
  $form['#submit'][] = 'siteinfo_form_system_site_information_settings_submit';
}

/**
 * Custom submit handler for site information form.
 */
function siteinfo_form_system_site_information_settings_submit($form, &$form_state) {
  if ($form_state['values']['siteapikey'] !== '') {
    $message = check_plain(t('Site API Key has been saved.') . ' ' . $form_state['values']['siteapikey']);
    drupal_set_message($message);
  }
}

/**
 * Custom function to convert node into JSON.
 * @param (string)
 *  Site API key
 * @param (int)
 *  Node ID
 */
function siteinfo_json_callback($site_api_key, $nid) {
  // Check if the nid is available and load node.
  if (isset($nid) && $node = node_load($nid)) {
    // Check Site API key is valid.
    $siteapikey = (variable_get('siteapikey') == $site_api_key) ? variable_get('siteapikey') : '';
    // Check siteapikey is not null and node is type of page.
    if ($siteapikey !== '' && $node->type == 'page') {
      return drupal_json_output($node);
    }
    else {
      return drupal_access_denied();
    }
  }
  else {
    return drupal_access_denied();
  }
}
